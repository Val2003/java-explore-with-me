{
	"info": {
		"_postman_id": "493a2cc9-af9b-41ba-83f7-f0f86f851609",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27933625"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "{{baseUrl}}/admin/categories",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\": \"Выставки\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Концерты\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Театр\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 4",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Обучение\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 5",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Кино\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 6",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Фестивали\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Экскурсии\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 8",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Стандапы\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{baseUrl}}/admin/categories 9",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Прочие\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user136@user.com\"').to.eql('user1@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user1\"').to.eql('user1');",
									"});",
									"",
									"pm.test(\"Сохранение значения поля из ответа\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    var idValue1 = jsonData.id",
									"    pm.collectionVariables.set(\"idValue1\", idValue1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user1\",\n    \"email\": \"user1@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user137@user.com\"').to.eql('user2@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');",
									"    pm.test(\"Сохранение значения поля из ответа\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    var idValue2 = jsonData.id",
									"    pm.collectionVariables.set(\"idValue2\", idValue2);",
									"",
									"});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user2\",\n    \"email\": \"user2@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user3@user.com\"').to.eql('user3@user.com');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"user3\"').to.eql('user3');",
									"    pm.test(\"Сохранение значения поля из ответа\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    var idValue3 = jsonData.id",
									"    pm.collectionVariables.set(\"idValue3\", idValue3);",
									"",
									"});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user3\",\n    \"email\": \"user3@user.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Event 1 by User 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Сохранение значения поля из ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var eventValue1 = jsonData.id\r",
									"    pm.collectionVariables.set(\"eventValue1\", eventValue1);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Event title in request and response must be equal');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Event annotation in request and response must be equal');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Event \"paid\" parameter in request and response must be equal');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Event date in request and response must be equal');\r",
									"    pm.expect(target.description).equal(source.description, 'Event description in request and response must be equal');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Event participantLimit in request and response must be equal');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Event location latitude(lat) in request and response must be equal');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Event location longitude(lon) in request and response must be equal');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Event \"requestModeration\" parameter in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"11.06 We are walking along Arbat\",\r\n    \"category\": 1,\r\n    \"description\": \"About travels all groups\",\r\n    \"eventDate\": \"2024-12-10 13:00:00\",\r\n    \"location\": {\r\n        \"description\": \"Moskow calling all users\",\r\n        \"lat\": 35.6,\r\n        \"lon\": 22.3\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": true,\r\n    \"title\": \"walking\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue1}}",
									"description": "(Required) current user id"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Event 2 by User 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Сохранение значения поля из ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var idValue2 = jsonData.id\r",
									"    pm.collectionVariables.set(\"eventValue2\", idValue2);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Event title in request and response must be equal');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Event annotation in request and response must be equal');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Event \"paid\" parameter in request and response must be equal');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Event date in request and response must be equal');\r",
									"    pm.expect(target.description).equal(source.description, 'Event description in request and response must be equal');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Event participantLimit in request and response must be equal');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Event location latitude(lat) in request and response must be equal');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Event location longitude(lon) in request and response must be equal');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Event \"requestModeration\" parameter in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"15.07 Пошли на ВДНХ чтобы прогуляться\",\r\n    \"category\": 2,\r\n    \"description\": \"about trip all groups next week\",\r\n    \"eventDate\": \"2024-12-10 17:00:00\",\r\n    \"location\": {\r\n        \"description\": \"VDNH super accomodation\",\r\n        \"lat\": 333.6,\r\n        \"lon\": 444.3\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 5,\r\n    \"requestModeration\": true,\r\n    \"title\": \"VDNH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}",
									"description": "(Required) current user id"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Event 3 by User 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Сохранение значения поля из ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var idValue3 = jsonData.id\r",
									"    pm.collectionVariables.set(\"eventValue3\", idValue3);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Event title in request and response must be equal');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Event annotation in request and response must be equal');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Event \"paid\" parameter in request and response must be equal');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Event date in request and response must be equal');\r",
									"    pm.expect(target.description).equal(source.description, 'Event description in request and response must be equal');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Event participantLimit in request and response must be equal');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Event location latitude(lat) in request and response must be equal');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Event location longitude(lon) in request and response must be equal');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Event \"requestModeration\" parameter in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"20.07 Посещение театра на Таганке\",\r\n    \"category\": 2,\r\n    \"description\": \"Ходили на спектакль в самы разгар сезона\",\r\n    \"eventDate\": \"2024-07-20 15:00:00\",\r\n    \"location\": {\r\n        \"description\": \"Женитьба Фигаро и другие приключения Шурика\",\r\n        \"lat\": 10.0,\r\n        \"lon\": 12.0\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Theatre\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue3}}",
									"description": "(Required) current user id"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Event 4 by User2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Сохранение значения поля из ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var eventValue4 = jsonData.id\r",
									"    pm.collectionVariables.set(\"eventValue4\", eventValue4);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Event title in request and response must be equal');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Event annotation in request and response must be equal');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Event \"paid\" parameter in request and response must be equal');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Event date in request and response must be equal');\r",
									"    pm.expect(target.description).equal(source.description, 'Event description in request and response must be equal');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Event participantLimit in request and response must be equal');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Event location latitude(lat) in request and response must be equal');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Event location longitude(lon) in request and response must be equal');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Event \"requestModeration\" parameter in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"26.08  Выставка Художников в подвале\",\r\n    \"category\": 1,\r\n    \"description\": \"Выставка в филиале Художественного музея\",\r\n    \"eventDate\": \"2024-12-05 18:00:00\",\r\n    \"location\": {\r\n        \"description\": \"Exgibition on tveskaya street\",\r\n        \"lat\": 23.6,\r\n        \"lon\": 33.3\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": false,\r\n    \"title\": \"great exgibition\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}",
									"description": "(Required) current user id"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Event 1 set Cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('publishedOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.state).equal(\"CANCELED\", 'Event state must change from PENDING to CANCELED when stateAction equals REJECT_EVENT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"REJECT_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventValue1}}",
									"description": "(Required)"
								}
							]
						},
						"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
					},
					"response": []
				},
				{
					"name": "Event 2 set Published",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('publishedOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.state).equal(\"PUBLISHED\", 'Event state must change from PENDING to PUBLISHED when stateAction equals PUBLISH_EVENT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventValue2}}",
									"description": "(Required)"
								}
							]
						},
						"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
					},
					"response": []
				},
				{
					"name": "Event 3 set Published",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('title');\r",
									"    pm.expect(target).to.have.property('annotation');\r",
									"    pm.expect(target).to.have.property('category');\r",
									"    pm.expect(target).to.have.property('paid');\r",
									"    pm.expect(target).to.have.property('eventDate');\r",
									"    pm.expect(target).to.have.property('initiator');\r",
									"    pm.expect(target).to.have.property('description');\r",
									"    pm.expect(target).to.have.property('participantLimit');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('publishedOn');\r",
									"    pm.expect(target).to.have.property('location');\r",
									"    pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.state).equal(\"PUBLISHED\", 'Event state must change from PENDING to PUBLISHED when stateAction equals PUBLISH_EVENT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventValue3}}",
									"description": "(Required) id события"
								}
							]
						},
						"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "User 1 Event 2 Сomment 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.text).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Comment text in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Enybody is hier?\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue1}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 owner Event 2 Сomment 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.text).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Comment text in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"ну и что же делать\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 Event 2 Сomment 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.text).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Comment text in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"what can i do?\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue3}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 Event 1 cancelled Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 409 and json body response\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Это не работает так\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue3}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1  Event 150 non-existent Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 404 and json body response\", function () {\r",
									"    pm.response.to.be.notFound;  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Это не будет работать\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}"
								},
								{
									"key": "eventId",
									"value": "150"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 1,2 set Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body must contain a list of 2 comments\"), function () {\r",
									"    pm.expect(target).length(2);\r",
									"}\r",
									"\r",
									"pm.test(\"Category must contain fields: id, name\", function () {\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('createdOn');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentIds\": [1, 2],\r\n    \"status\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 3 set Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body must contain a list of 1 comment\"), function () {\r",
									"    pm.expect(target).length(1);\r",
									"}\r",
									"\r",
									"pm.test(\"Category must contain fields: id, name\", function () {\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('createdOn');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentIds\": [3],\r\n    \"status\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 Event 3 Сomment 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 201 and json body response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('createdOn');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Request data must be equal to response data\", function () {\r",
									"    pm.expect(target.text).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Comment text in request and response must be equal');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Can I bring a friend?\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}"
								},
								{
									"key": "eventId",
									"value": "{{idValue2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 5 Pending by User 2 for Event 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 409 and json body response\", function () {\r",
									"    pm.response.to.have.status(409);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue2}}"
								},
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body must containt an empty list\"), function () {\r",
									"    pm.response.body.length(0);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 Event 15 Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body must contain an empty list\"), function () {\r",
									"    pm.response.body.length(0);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}"
								},
								{
									"key": "eventId",
									"value": "105"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 2 by User 1 not commenter for Event 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 404 and json body response\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue1}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue3}}"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 2 deleted by User 2 for Event 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 404 and json body response\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{idValue2}}"
								},
								{
									"key": "eventId",
									"value": "{{eventValue3}}"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Comments by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body must contain a list of 2 comments\"), function () {\r",
									"    pm.expect(target).length(2);\r",
									"}\r",
									"\r",
									"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('createdOn');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?statuses=PENDING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "",
									"disabled": true
								},
								{
									"key": "users",
									"value": "",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "PENDING"
								},
								{
									"key": "events",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Comments by events 2, 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must have status 200 and json body response\", function () {\r",
									"    pm.response.to.be.ok;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body must contain a list of 2 comments\"), function () {\r",
									"    pm.expect(target).length(2);\r",
									"}\r",
									"\r",
									"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('createdOn');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?events={{eventValue1}},{{eventValue2}}&from=0&size=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "",
									"disabled": true
								},
								{
									"key": "users",
									"value": "",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "",
									"disabled": true
								},
								{
									"key": "events",
									"value": "{{eventValue1}},{{eventValue2}}"
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User 2 Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response must have status 200 and json body response\", function () {\r",
							"    pm.response.to.be.ok;   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Response body must contain a list of 2 comments\"), function () {\r",
							"    pm.expect(target).length(2);\r",
							"}\r",
							"\r",
							"pm.test(\"Comment must contain fields: text, createdOn, user, event\", function () {\r",
							"    pm.expect(target[0]).to.have.property('text');\r",
							"    pm.expect(target[0]).to.have.property('createdOn');\r",
							"    pm.expect(target[0]).to.have.property('user');\r",
							"    pm.expect(target[0]).to.have.property('event');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{idValue2}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "idValue1",
			"value": "",
			"type": "string"
		},
		{
			"key": "idValue2",
			"value": "",
			"type": "string"
		},
		{
			"key": "idValue3",
			"value": "",
			"type": "string"
		},
		{
			"key": "saved_last_number",
			"value": ""
		},
		{
			"key": "count",
			"value": ""
		},
		{
			"key": "eventValue1",
			"value": ""
		},
		{
			"key": "eventValue3",
			"value": ""
		},
		{
			"key": "eventValue2",
			"value": ""
		},
		{
			"key": "eventValue4",
			"value": ""
		}
	]
}